
STM32F407_RTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001c3c  08001c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c54  08001c54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c5c  08001c5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c60  08001c60  00011c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6ec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdf  00000000  00000000  0002c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  0002eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020022  00000000  00000000  0002f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c583  00000000  00000000  0004f9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce766  00000000  00000000  0005bf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a68b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003008  00000000  00000000  0012a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001c24 	.word	0x08001c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08001c24 	.word	0x08001c24

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f956 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f802 	bl	80004d8 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0xc>
	...

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b094      	sub	sp, #80	; 0x50
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	2230      	movs	r2, #48	; 0x30
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fb94 	bl	8001c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <SystemClock_Config+0xb4>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <SystemClock_Config+0xb4>)
 8000506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050a:	6413      	str	r3, [r2, #64]	; 0x40
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <SystemClock_Config+0xb4>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <SystemClock_Config+0xb8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <SystemClock_Config+0xb8>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <SystemClock_Config+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2310      	movs	r3, #16
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0320 	add.w	r3, r7, #32
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fa3b 	bl	80009c4 <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000554:	f000 f830 	bl	80005b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	230f      	movs	r3, #15
 800055a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fc9e 	bl	8000eb4 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057e:	f000 f81b 	bl	80005b8 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40007000 	.word	0x40007000

08000594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a6:	f000 f90b 	bl	80007c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40001000 	.word	0x40001000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_MspInit+0x4c>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <HAL_MspInit+0x4c>)
 80005d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d8:	6453      	str	r3, [r2, #68]	; 0x44
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <HAL_MspInit+0x4c>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x4c>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_MspInit+0x4c>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	6413      	str	r3, [r2, #64]	; 0x40
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_MspInit+0x4c>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	2036      	movs	r0, #54	; 0x36
 800062a:	f000 f9a1 	bl	8000970 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800062e:	2036      	movs	r0, #54	; 0x36
 8000630:	f000 f9ba 	bl	80009a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <HAL_InitTick+0xa0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <HAL_InitTick+0xa0>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_InitTick+0xa0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000650:	f107 0210 	add.w	r2, r7, #16
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fde6 	bl	800122c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000660:	f000 fdd0 	bl	8001204 <HAL_RCC_GetPCLK1Freq>
 8000664:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <HAL_InitTick+0xa4>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	0c9b      	lsrs	r3, r3, #18
 8000670:	3b01      	subs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_InitTick+0xa8>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <HAL_InitTick+0xac>)
 8000678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_InitTick+0xa8>)
 800067c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000680:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_InitTick+0xa8>)
 8000684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000686:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_InitTick+0xa8>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_InitTick+0xa8>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <HAL_InitTick+0xa8>)
 8000696:	f000 fdfb 	bl	8001290 <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d104      	bne.n	80006aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <HAL_InitTick+0xa8>)
 80006a2:	f000 fe4f 	bl	8001344 <HAL_TIM_Base_Start_IT>
 80006a6:	4603      	mov	r3, r0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	200000b4 	.word	0x200000b4
 80006c0:	40001000 	.word	0x40001000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler+0x4>

080006dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler+0x4>

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <TIM6_DAC_IRQHandler+0x10>)
 80006f6:	f000 fe95 	bl	8001424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000b4 	.word	0x200000b4

08000704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <SystemInit+0x20>)
 800070a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <SystemInit+0x20>)
 8000710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800072e:	490e      	ldr	r1, [pc, #56]	; (8000768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000744:	4c0b      	ldr	r4, [pc, #44]	; (8000774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000752:	f7ff ffd7 	bl	8000704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 fa39 	bl	8001bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800075a:	f7ff feb5 	bl	80004c8 <main>
  bx  lr    
 800075e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800076c:	08001c64 	.word	0x08001c64
  ldr r2, =_sbss
 8000770:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000774:	20000100 	.word	0x20000100

08000778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC_IRQHandler>
	...

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_Init+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <HAL_Init+0x40>)
 8000786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800078a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_Init+0x40>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <HAL_Init+0x40>)
 8000792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_Init+0x40>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_Init+0x40>)
 800079e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f8d8 	bl	800095a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f7ff ff32 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff ff08 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023c00 	.word	0x40023c00

080007c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x20>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_IncTick+0x24>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	200000fc 	.word	0x200000fc

080007e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_GetTick+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	200000fc 	.word	0x200000fc

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff4c 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000982:	f7ff ff61 	bl	8000848 <__NVIC_GetPriorityGrouping>
 8000986:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f7ff ffb1 	bl	80008f4 <NVIC_EncodePriority>
 8000992:	4602      	mov	r2, r0
 8000994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff80 	bl	80008a0 <__NVIC_SetPriority>
}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff54 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e264      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d075      	beq.n	8000ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009e2:	4ba3      	ldr	r3, [pc, #652]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f003 030c 	and.w	r3, r3, #12
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d00c      	beq.n	8000a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009ee:	4ba0      	ldr	r3, [pc, #640]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	d112      	bne.n	8000a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009fa:	4b9d      	ldr	r3, [pc, #628]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a06:	d10b      	bne.n	8000a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a08:	4b99      	ldr	r3, [pc, #612]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d05b      	beq.n	8000acc <HAL_RCC_OscConfig+0x108>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d157      	bne.n	8000acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e23f      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a28:	d106      	bne.n	8000a38 <HAL_RCC_OscConfig+0x74>
 8000a2a:	4b91      	ldr	r3, [pc, #580]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a90      	ldr	r2, [pc, #576]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	e01d      	b.n	8000a74 <HAL_RCC_OscConfig+0xb0>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a40:	d10c      	bne.n	8000a5c <HAL_RCC_OscConfig+0x98>
 8000a42:	4b8b      	ldr	r3, [pc, #556]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a8a      	ldr	r2, [pc, #552]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	4b88      	ldr	r3, [pc, #544]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a87      	ldr	r2, [pc, #540]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e00b      	b.n	8000a74 <HAL_RCC_OscConfig+0xb0>
 8000a5c:	4b84      	ldr	r3, [pc, #528]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a83      	ldr	r2, [pc, #524]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b81      	ldr	r3, [pc, #516]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a80      	ldr	r2, [pc, #512]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d013      	beq.n	8000aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a7c:	f7ff feb4 	bl	80007e8 <HAL_GetTick>
 8000a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	e008      	b.n	8000a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a84:	f7ff feb0 	bl	80007e8 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b64      	cmp	r3, #100	; 0x64
 8000a90:	d901      	bls.n	8000a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a92:	2303      	movs	r3, #3
 8000a94:	e204      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a96:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f0      	beq.n	8000a84 <HAL_RCC_OscConfig+0xc0>
 8000aa2:	e014      	b.n	8000ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fea0 	bl	80007e8 <HAL_GetTick>
 8000aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aac:	f7ff fe9c 	bl	80007e8 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e1f0      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000abe:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f0      	bne.n	8000aac <HAL_RCC_OscConfig+0xe8>
 8000aca:	e000      	b.n	8000ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d063      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ada:	4b65      	ldr	r3, [pc, #404]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00b      	beq.n	8000afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ae6:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d11c      	bne.n	8000b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000af2:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d116      	bne.n	8000b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <HAL_RCC_OscConfig+0x152>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d001      	beq.n	8000b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e1c4      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b16:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4952      	ldr	r1, [pc, #328]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b2a:	e03a      	b.n	8000ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d020      	beq.n	8000b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b34:	4b4f      	ldr	r3, [pc, #316]	; (8000c74 <HAL_RCC_OscConfig+0x2b0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b3a:	f7ff fe55 	bl	80007e8 <HAL_GetTick>
 8000b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b40:	e008      	b.n	8000b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b42:	f7ff fe51 	bl	80007e8 <HAL_GetTick>
 8000b46:	4602      	mov	r2, r0
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d901      	bls.n	8000b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000b50:	2303      	movs	r3, #3
 8000b52:	e1a5      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b54:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0f0      	beq.n	8000b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b60:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4940      	ldr	r1, [pc, #256]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b70:	4313      	orrs	r3, r2
 8000b72:	600b      	str	r3, [r1, #0]
 8000b74:	e015      	b.n	8000ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <HAL_RCC_OscConfig+0x2b0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fe34 	bl	80007e8 <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b84:	f7ff fe30 	bl	80007e8 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e184      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d030      	beq.n	8000c10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d016      	beq.n	8000be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_RCC_OscConfig+0x2b4>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fe14 	bl	80007e8 <HAL_GetTick>
 8000bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc2:	e008      	b.n	8000bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fe10 	bl	80007e8 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d901      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e164      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f0      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x200>
 8000be2:	e015      	b.n	8000c10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <HAL_RCC_OscConfig+0x2b4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bea:	f7ff fdfd 	bl	80007e8 <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf0:	e008      	b.n	8000c04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bf2:	f7ff fdf9 	bl	80007e8 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e14d      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f0      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a0 	beq.w	8000d5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_RCC_OscConfig+0x2b8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d121      	bne.n	8000c9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_RCC_OscConfig+0x2b8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_RCC_OscConfig+0x2b8>)
 8000c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c66:	f7ff fdbf 	bl	80007e8 <HAL_GetTick>
 8000c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c6c:	e011      	b.n	8000c92 <HAL_RCC_OscConfig+0x2ce>
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	42470000 	.word	0x42470000
 8000c78:	42470e80 	.word	0x42470e80
 8000c7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c80:	f7ff fdb2 	bl	80007e8 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e106      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c92:	4b85      	ldr	r3, [pc, #532]	; (8000ea8 <HAL_RCC_OscConfig+0x4e4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d106      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x2f0>
 8000ca6:	4b81      	ldr	r3, [pc, #516]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000caa:	4a80      	ldr	r2, [pc, #512]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8000cb2:	e01c      	b.n	8000cee <HAL_RCC_OscConfig+0x32a>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	2b05      	cmp	r3, #5
 8000cba:	d10c      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x312>
 8000cbc:	4b7b      	ldr	r3, [pc, #492]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cc0:	4a7a      	ldr	r2, [pc, #488]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8000cc8:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ccc:	4a77      	ldr	r2, [pc, #476]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8000cd4:	e00b      	b.n	8000cee <HAL_RCC_OscConfig+0x32a>
 8000cd6:	4b75      	ldr	r3, [pc, #468]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cda:	4a74      	ldr	r2, [pc, #464]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce6:	4a71      	ldr	r2, [pc, #452]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000ce8:	f023 0304 	bic.w	r3, r3, #4
 8000cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d015      	beq.n	8000d22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fd77 	bl	80007e8 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cfc:	e00a      	b.n	8000d14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cfe:	f7ff fd73 	bl	80007e8 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e0c5      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d14:	4b65      	ldr	r3, [pc, #404]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0ee      	beq.n	8000cfe <HAL_RCC_OscConfig+0x33a>
 8000d20:	e014      	b.n	8000d4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d22:	f7ff fd61 	bl	80007e8 <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d28:	e00a      	b.n	8000d40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f7ff fd5d 	bl	80007e8 <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e0af      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d40:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1ee      	bne.n	8000d2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d105      	bne.n	8000d5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d52:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a55      	ldr	r2, [pc, #340]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 809b 	beq.w	8000e9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d68:	4b50      	ldr	r3, [pc, #320]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d05c      	beq.n	8000e2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d141      	bne.n	8000e00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <HAL_RCC_OscConfig+0x4ec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d82:	f7ff fd31 	bl	80007e8 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8a:	f7ff fd2d 	bl	80007e8 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e081      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f0      	bne.n	8000d8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	019b      	lsls	r3, r3, #6
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	061b      	lsls	r3, r3, #24
 8000dcc:	4937      	ldr	r1, [pc, #220]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <HAL_RCC_OscConfig+0x4ec>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fd06 	bl	80007e8 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de0:	f7ff fd02 	bl	80007e8 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e056      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x41c>
 8000dfe:	e04e      	b.n	8000e9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_RCC_OscConfig+0x4ec>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fcef 	bl	80007e8 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e0e:	f7ff fceb 	bl	80007e8 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e03f      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f0      	bne.n	8000e0e <HAL_RCC_OscConfig+0x44a>
 8000e2c:	e037      	b.n	8000e9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e032      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_RCC_OscConfig+0x4e8>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d028      	beq.n	8000e9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d121      	bne.n	8000e9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d11a      	bne.n	8000e9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d111      	bne.n	8000e9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	3b01      	subs	r3, #1
 8000e84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d107      	bne.n	8000e9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d001      	beq.n	8000e9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	42470060 	.word	0x42470060

08000eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e0cc      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ec8:	4b68      	ldr	r3, [pc, #416]	; (800106c <HAL_RCC_ClockConfig+0x1b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d90c      	bls.n	8000ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ed6:	4b65      	ldr	r3, [pc, #404]	; (800106c <HAL_RCC_ClockConfig+0x1b8>)
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ede:	4b63      	ldr	r3, [pc, #396]	; (800106c <HAL_RCC_ClockConfig+0x1b8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d001      	beq.n	8000ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e0b8      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d020      	beq.n	8000f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f08:	4b59      	ldr	r3, [pc, #356]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a58      	ldr	r2, [pc, #352]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f20:	4b53      	ldr	r3, [pc, #332]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a52      	ldr	r2, [pc, #328]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f2c:	4b50      	ldr	r3, [pc, #320]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	494d      	ldr	r1, [pc, #308]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d044      	beq.n	8000fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d107      	bne.n	8000f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d119      	bne.n	8000f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e07f      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d003      	beq.n	8000f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d107      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e06f      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e067      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f023 0203 	bic.w	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4934      	ldr	r1, [pc, #208]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fa4:	f7ff fc20 	bl	80007e8 <HAL_GetTick>
 8000fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000faa:	e00a      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fac:	f7ff fc1c 	bl	80007e8 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e04f      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 020c 	and.w	r2, r3, #12
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d1eb      	bne.n	8000fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d20c      	bcs.n	8000ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d001      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e032      	b.n	8001062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4916      	ldr	r1, [pc, #88]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	4313      	orrs	r3, r2
 8001018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	490e      	ldr	r1, [pc, #56]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	4313      	orrs	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800103a:	f000 f821 	bl	8001080 <HAL_RCC_GetSysClockFreq>
 800103e:	4602      	mov	r2, r0
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	490a      	ldr	r1, [pc, #40]	; (8001074 <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	5ccb      	ldrb	r3, [r1, r3]
 800104e:	fa22 f303 	lsr.w	r3, r2, r3
 8001052:	4a09      	ldr	r2, [pc, #36]	; (8001078 <HAL_RCC_ClockConfig+0x1c4>)
 8001054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_RCC_ClockConfig+0x1c8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fada 	bl	8000614 <HAL_InitTick>

  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00
 8001070:	40023800 	.word	0x40023800
 8001074:	08001c3c 	.word	0x08001c3c
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001086:	2100      	movs	r1, #0
 8001088:	6079      	str	r1, [r7, #4]
 800108a:	2100      	movs	r1, #0
 800108c:	60f9      	str	r1, [r7, #12]
 800108e:	2100      	movs	r1, #0
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001092:	2100      	movs	r1, #0
 8001094:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001096:	4952      	ldr	r1, [pc, #328]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001098:	6889      	ldr	r1, [r1, #8]
 800109a:	f001 010c 	and.w	r1, r1, #12
 800109e:	2908      	cmp	r1, #8
 80010a0:	d00d      	beq.n	80010be <HAL_RCC_GetSysClockFreq+0x3e>
 80010a2:	2908      	cmp	r1, #8
 80010a4:	f200 8094 	bhi.w	80011d0 <HAL_RCC_GetSysClockFreq+0x150>
 80010a8:	2900      	cmp	r1, #0
 80010aa:	d002      	beq.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32>
 80010ac:	2904      	cmp	r1, #4
 80010ae:	d003      	beq.n	80010b8 <HAL_RCC_GetSysClockFreq+0x38>
 80010b0:	e08e      	b.n	80011d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80010b4:	60bb      	str	r3, [r7, #8]
       break;
 80010b6:	e08e      	b.n	80011d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010b8:	4b4b      	ldr	r3, [pc, #300]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80010ba:	60bb      	str	r3, [r7, #8]
      break;
 80010bc:	e08b      	b.n	80011d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010be:	4948      	ldr	r1, [pc, #288]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80010c0:	6849      	ldr	r1, [r1, #4]
 80010c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80010c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010c8:	4945      	ldr	r1, [pc, #276]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80010ca:	6849      	ldr	r1, [r1, #4]
 80010cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80010d0:	2900      	cmp	r1, #0
 80010d2:	d024      	beq.n	800111e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d4:	4942      	ldr	r1, [pc, #264]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80010d6:	6849      	ldr	r1, [r1, #4]
 80010d8:	0989      	lsrs	r1, r1, #6
 80010da:	4608      	mov	r0, r1
 80010dc:	f04f 0100 	mov.w	r1, #0
 80010e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80010e4:	f04f 0500 	mov.w	r5, #0
 80010e8:	ea00 0204 	and.w	r2, r0, r4
 80010ec:	ea01 0305 	and.w	r3, r1, r5
 80010f0:	493d      	ldr	r1, [pc, #244]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80010f2:	fb01 f003 	mul.w	r0, r1, r3
 80010f6:	2100      	movs	r1, #0
 80010f8:	fb01 f102 	mul.w	r1, r1, r2
 80010fc:	1844      	adds	r4, r0, r1
 80010fe:	493a      	ldr	r1, [pc, #232]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001100:	fba2 0101 	umull	r0, r1, r2, r1
 8001104:	1863      	adds	r3, r4, r1
 8001106:	4619      	mov	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	461a      	mov	r2, r3
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	f7ff f85e 	bl	80001d0 <__aeabi_uldivmod>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4613      	mov	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e04a      	b.n	80011b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	099b      	lsrs	r3, r3, #6
 8001124:	461a      	mov	r2, r3
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800112e:	f04f 0100 	mov.w	r1, #0
 8001132:	ea02 0400 	and.w	r4, r2, r0
 8001136:	ea03 0501 	and.w	r5, r3, r1
 800113a:	4620      	mov	r0, r4
 800113c:	4629      	mov	r1, r5
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	014b      	lsls	r3, r1, #5
 8001148:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800114c:	0142      	lsls	r2, r0, #5
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	1b00      	subs	r0, r0, r4
 8001154:	eb61 0105 	sbc.w	r1, r1, r5
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	018b      	lsls	r3, r1, #6
 8001162:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001166:	0182      	lsls	r2, r0, #6
 8001168:	1a12      	subs	r2, r2, r0
 800116a:	eb63 0301 	sbc.w	r3, r3, r1
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	f04f 0100 	mov.w	r1, #0
 8001176:	00d9      	lsls	r1, r3, #3
 8001178:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800117c:	00d0      	lsls	r0, r2, #3
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	1912      	adds	r2, r2, r4
 8001184:	eb45 0303 	adc.w	r3, r5, r3
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	f04f 0100 	mov.w	r1, #0
 8001190:	0299      	lsls	r1, r3, #10
 8001192:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001196:	0290      	lsls	r0, r2, #10
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f7ff f812 	bl	80001d0 <__aeabi_uldivmod>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4613      	mov	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	0c1b      	lsrs	r3, r3, #16
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	3301      	adds	r3, #1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011cc:	60bb      	str	r3, [r7, #8]
      break;
 80011ce:	e002      	b.n	80011d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80011d2:	60bb      	str	r3, [r7, #8]
      break;
 80011d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011d6:	68bb      	ldr	r3, [r7, #8]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	00f42400 	.word	0x00f42400
 80011e8:	017d7840 	.word	0x017d7840

080011ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_RCC_GetHCLKFreq+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000

08001204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001208:	f7ff fff0 	bl	80011ec <HAL_RCC_GetHCLKFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	0a9b      	lsrs	r3, r3, #10
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	4903      	ldr	r1, [pc, #12]	; (8001228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	08001c4c 	.word	0x08001c4c

0800122c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	220f      	movs	r2, #15
 800123a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_RCC_GetClockConfig+0x5c>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_RCC_GetClockConfig+0x5c>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_RCC_GetClockConfig+0x5c>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_GetClockConfig+0x5c>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_RCC_GetClockConfig+0x60>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0207 	and.w	r2, r3, #7
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e041      	b.n	8001326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f839 	bl	800132e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3304      	adds	r3, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f000 f9d8 	bl	8001684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d001      	beq.n	800135c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e04e      	b.n	80013fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2202      	movs	r2, #2
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <HAL_TIM_Base_Start_IT+0xc4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d022      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001386:	d01d      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_TIM_Base_Start_IT+0xc8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d018      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_TIM_Base_Start_IT+0xcc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_TIM_Base_Start_IT+0xd0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00e      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_TIM_Base_Start_IT+0xd4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d009      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_TIM_Base_Start_IT+0xd8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d004      	beq.n	80013c4 <HAL_TIM_Base_Start_IT+0x80>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <HAL_TIM_Base_Start_IT+0xdc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d111      	bne.n	80013e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d010      	beq.n	80013f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013e6:	e007      	b.n	80013f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000
 800140c:	40000400 	.word	0x40000400
 8001410:	40000800 	.word	0x40000800
 8001414:	40000c00 	.word	0x40000c00
 8001418:	40010400 	.word	0x40010400
 800141c:	40014000 	.word	0x40014000
 8001420:	40001800 	.word	0x40001800

08001424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b02      	cmp	r3, #2
 8001438:	d122      	bne.n	8001480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b02      	cmp	r3, #2
 8001446:	d11b      	bne.n	8001480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0202 	mvn.w	r2, #2
 8001450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8ee 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 800146c:	e005      	b.n	800147a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f8e0 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f8f1 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b04      	cmp	r3, #4
 800148c:	d122      	bne.n	80014d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b04      	cmp	r3, #4
 800149a:	d11b      	bne.n	80014d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f06f 0204 	mvn.w	r2, #4
 80014a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2202      	movs	r2, #2
 80014aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f8c4 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 80014c0:	e005      	b.n	80014ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f8b6 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f8c7 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d122      	bne.n	8001528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d11b      	bne.n	8001528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f06f 0208 	mvn.w	r2, #8
 80014f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f89a 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 8001514:	e005      	b.n	8001522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f88c 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f89d 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b10      	cmp	r3, #16
 8001534:	d122      	bne.n	800157c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b10      	cmp	r3, #16
 8001542:	d11b      	bne.n	800157c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f06f 0210 	mvn.w	r2, #16
 800154c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2208      	movs	r2, #8
 8001552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f870 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 8001568:	e005      	b.n	8001576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f862 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f873 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10e      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d107      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0201 	mvn.w	r2, #1
 80015a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fff6 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	2b80      	cmp	r3, #128	; 0x80
 80015b4:	d10e      	bne.n	80015d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b80      	cmp	r3, #128	; 0x80
 80015c2:	d107      	bne.n	80015d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f902 	bl	80017d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d10e      	bne.n	8001600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b40      	cmp	r3, #64	; 0x40
 80015ee:	d107      	bne.n	8001600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f838 	bl	8001670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b20      	cmp	r3, #32
 800160c:	d10e      	bne.n	800162c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b20      	cmp	r3, #32
 800161a:	d107      	bne.n	800162c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0220 	mvn.w	r2, #32
 8001624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f8cc 	bl	80017c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a40      	ldr	r2, [pc, #256]	; (8001798 <TIM_Base_SetConfig+0x114>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <TIM_Base_SetConfig+0x40>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a2:	d00f      	beq.n	80016c4 <TIM_Base_SetConfig+0x40>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <TIM_Base_SetConfig+0x118>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00b      	beq.n	80016c4 <TIM_Base_SetConfig+0x40>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <TIM_Base_SetConfig+0x11c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <TIM_Base_SetConfig+0x40>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <TIM_Base_SetConfig+0x120>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d003      	beq.n	80016c4 <TIM_Base_SetConfig+0x40>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3a      	ldr	r2, [pc, #232]	; (80017a8 <TIM_Base_SetConfig+0x124>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d108      	bne.n	80016d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <TIM_Base_SetConfig+0x114>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d02b      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d027      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a2c      	ldr	r2, [pc, #176]	; (800179c <TIM_Base_SetConfig+0x118>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d023      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <TIM_Base_SetConfig+0x11c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <TIM_Base_SetConfig+0x120>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01b      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <TIM_Base_SetConfig+0x124>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d017      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <TIM_Base_SetConfig+0x128>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <TIM_Base_SetConfig+0x12c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00f      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <TIM_Base_SetConfig+0x130>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00b      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <TIM_Base_SetConfig+0x134>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a24      	ldr	r2, [pc, #144]	; (80017bc <TIM_Base_SetConfig+0x138>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d003      	beq.n	8001736 <TIM_Base_SetConfig+0xb2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <TIM_Base_SetConfig+0x13c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d108      	bne.n	8001748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800173c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <TIM_Base_SetConfig+0x114>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d003      	beq.n	800177c <TIM_Base_SetConfig+0xf8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <TIM_Base_SetConfig+0x124>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d103      	bne.n	8001784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	615a      	str	r2, [r3, #20]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40010000 	.word	0x40010000
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800
 80017a4:	40000c00 	.word	0x40000c00
 80017a8:	40010400 	.word	0x40010400
 80017ac:	40014000 	.word	0x40014000
 80017b0:	40014400 	.word	0x40014400
 80017b4:	40014800 	.word	0x40014800
 80017b8:	40001800 	.word	0x40001800
 80017bc:	40001c00 	.word	0x40001c00
 80017c0:	40002000 	.word	0x40002000

080017c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6892      	ldr	r2, [r2, #8]
 800184a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6852      	ldr	r2, [r2, #4]
 8001854:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d103      	bne.n	8001868 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001892:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <xTaskIncrementTick+0x144>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 808e 	bne.w	80019b8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <xTaskIncrementTick+0x148>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <xTaskIncrementTick+0x148>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d120      	bne.n	80018f2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80018b0:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <xTaskIncrementTick+0x14c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80018ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018be:	f383 8811 	msr	BASEPRI, r3
 80018c2:	f3bf 8f6f 	isb	sy
 80018c6:	f3bf 8f4f 	dsb	sy
 80018ca:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80018cc:	bf00      	nop
 80018ce:	e7fe      	b.n	80018ce <xTaskIncrementTick+0x46>
 80018d0:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <xTaskIncrementTick+0x14c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <xTaskIncrementTick+0x150>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a3e      	ldr	r2, [pc, #248]	; (80019d4 <xTaskIncrementTick+0x14c>)
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4a3e      	ldr	r2, [pc, #248]	; (80019d8 <xTaskIncrementTick+0x150>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <xTaskIncrementTick+0x154>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a3c      	ldr	r2, [pc, #240]	; (80019dc <xTaskIncrementTick+0x154>)
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	f000 f8df 	bl	8001ab0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <xTaskIncrementTick+0x158>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d348      	bcc.n	800198e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <xTaskIncrementTick+0x14c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d104      	bne.n	8001910 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001906:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <xTaskIncrementTick+0x158>)
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	601a      	str	r2, [r3, #0]
                    break;
 800190e:	e03e      	b.n	800198e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <xTaskIncrementTick+0x14c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	d203      	bcs.n	8001930 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <xTaskIncrementTick+0x158>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800192e:	e02e      	b.n	800198e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3304      	adds	r3, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff7d 	bl	8001834 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3318      	adds	r3, #24
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff74 	bl	8001834 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2201      	movs	r2, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <xTaskIncrementTick+0x15c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <xTaskIncrementTick+0x15c>)
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <xTaskIncrementTick+0x160>)
 800196c:	441a      	add	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3304      	adds	r3, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff ff39 	bl	80017ec <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <xTaskIncrementTick+0x164>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	429a      	cmp	r2, r3
 8001986:	d3b9      	bcc.n	80018fc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800198c:	e7b6      	b.n	80018fc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <xTaskIncrementTick+0x164>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	4914      	ldr	r1, [pc, #80]	; (80019e8 <xTaskIncrementTick+0x160>)
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d901      	bls.n	80019aa <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <xTaskIncrementTick+0x168>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e004      	b.n	80019c2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <xTaskIncrementTick+0x16c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <xTaskIncrementTick+0x16c>)
 80019c0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80019c2:	697b      	ldr	r3, [r7, #20]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000b0 	.word	0x200000b0
 80019d0:	20000098 	.word	0x20000098
 80019d4:	20000090 	.word	0x20000090
 80019d8:	20000094 	.word	0x20000094
 80019dc:	200000a8 	.word	0x200000a8
 80019e0:	200000ac 	.word	0x200000ac
 80019e4:	2000009c 	.word	0x2000009c
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	20000028 	.word	0x20000028
 80019f0:	200000a4 	.word	0x200000a4
 80019f4:	200000a0 	.word	0x200000a0

080019f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <vTaskSwitchContext+0xa4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <vTaskSwitchContext+0xa8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001a0c:	e03f      	b.n	8001a8e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <vTaskSwitchContext+0xa8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <vTaskSwitchContext+0xac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	f1c3 031f 	rsb	r3, r3, #31
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	491f      	ldr	r1, [pc, #124]	; (8001aa8 <vTaskSwitchContext+0xb0>)
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	607b      	str	r3, [r7, #4]
    }
 8001a50:	bf00      	nop
 8001a52:	e7fe      	b.n	8001a52 <vTaskSwitchContext+0x5a>
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <vTaskSwitchContext+0xb0>)
 8001a60:	4413      	add	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3308      	adds	r3, #8
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d104      	bne.n	8001a84 <vTaskSwitchContext+0x8c>
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <vTaskSwitchContext+0xb4>)
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200000b0 	.word	0x200000b0
 8001aa0:	200000a4 	.word	0x200000a4
 8001aa4:	2000009c 	.word	0x2000009c
 8001aa8:	2000002c 	.word	0x2000002c
 8001aac:	20000028 	.word	0x20000028

08001ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <prvResetNextTaskUnblockTime+0x30>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d104      	bne.n	8001ac8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <prvResetNextTaskUnblockTime+0x34>)
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ac6:	e005      	b.n	8001ad4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <prvResetNextTaskUnblockTime+0x30>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <prvResetNextTaskUnblockTime+0x34>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000090 	.word	0x20000090
 8001ae4:	200000ac 	.word	0x200000ac
	...

08001af0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <pxCurrentTCBConst2>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	6808      	ldr	r0, [r1, #0]
 8001af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001afa:	f380 8809 	msr	PSP, r0
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f380 8811 	msr	BASEPRI, r0
 8001b0a:	4770      	bx	lr
 8001b0c:	f3af 8000 	nop.w

08001b10 <pxCurrentTCBConst2>:
 8001b10:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
	...

08001b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001b20:	f3ef 8009 	mrs	r0, PSP
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <pxCurrentTCBConst>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f01e 0f10 	tst.w	lr, #16
 8001b30:	bf08      	it	eq
 8001b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3a:	6010      	str	r0, [r2, #0]
 8001b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b44:	f380 8811 	msr	BASEPRI, r0
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f7ff ff52 	bl	80019f8 <vTaskSwitchContext>
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f380 8811 	msr	BASEPRI, r0
 8001b5c:	bc09      	pop	{r0, r3}
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	6808      	ldr	r0, [r1, #0]
 8001b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b66:	f01e 0f10 	tst.w	lr, #16
 8001b6a:	bf08      	it	eq
 8001b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b70:	f380 8809 	msr	PSP, r0
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w

08001b80 <pxCurrentTCBConst>:
 8001b80:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop

08001b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
        __asm volatile
 8001b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	607b      	str	r3, [r7, #4]
    }
 8001ba0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001ba2:	f7ff fe71 	bl	8001888 <xTaskIncrementTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SysTick_Handler+0x40>)
 8001bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001bbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	e000ed04 	.word	0xe000ed04

08001bcc <__libc_init_array>:
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4d0d      	ldr	r5, [pc, #52]	; (8001c04 <__libc_init_array+0x38>)
 8001bd0:	4c0d      	ldr	r4, [pc, #52]	; (8001c08 <__libc_init_array+0x3c>)
 8001bd2:	1b64      	subs	r4, r4, r5
 8001bd4:	10a4      	asrs	r4, r4, #2
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	42a6      	cmp	r6, r4
 8001bda:	d109      	bne.n	8001bf0 <__libc_init_array+0x24>
 8001bdc:	4d0b      	ldr	r5, [pc, #44]	; (8001c0c <__libc_init_array+0x40>)
 8001bde:	4c0c      	ldr	r4, [pc, #48]	; (8001c10 <__libc_init_array+0x44>)
 8001be0:	f000 f820 	bl	8001c24 <_init>
 8001be4:	1b64      	subs	r4, r4, r5
 8001be6:	10a4      	asrs	r4, r4, #2
 8001be8:	2600      	movs	r6, #0
 8001bea:	42a6      	cmp	r6, r4
 8001bec:	d105      	bne.n	8001bfa <__libc_init_array+0x2e>
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf4:	4798      	blx	r3
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7ee      	b.n	8001bd8 <__libc_init_array+0xc>
 8001bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bfe:	4798      	blx	r3
 8001c00:	3601      	adds	r6, #1
 8001c02:	e7f2      	b.n	8001bea <__libc_init_array+0x1e>
 8001c04:	08001c5c 	.word	0x08001c5c
 8001c08:	08001c5c 	.word	0x08001c5c
 8001c0c:	08001c5c 	.word	0x08001c5c
 8001c10:	08001c60 	.word	0x08001c60

08001c14 <memset>:
 8001c14:	4402      	add	r2, r0
 8001c16:	4603      	mov	r3, r0
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <memset+0xa>
 8001c1c:	4770      	bx	lr
 8001c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c22:	e7f9      	b.n	8001c18 <memset+0x4>

08001c24 <_init>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	bf00      	nop
 8001c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2a:	bc08      	pop	{r3}
 8001c2c:	469e      	mov	lr, r3
 8001c2e:	4770      	bx	lr

08001c30 <_fini>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	bf00      	nop
 8001c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c36:	bc08      	pop	{r3}
 8001c38:	469e      	mov	lr, r3
 8001c3a:	4770      	bx	lr
